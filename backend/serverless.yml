# For full config options, check the docs:
#    docs.serverless.com

service: base-chess
# app and org for use with dashboard.serverless.com
#app: base-chess
#org: theftofaduck

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-2
#  stage: dev

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: "*" # TODO - Limit this to only the game tables


# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  postStartPublicGame:
    handler: src/endpoints/postStartPublicGame.lambdaHandler
    events:
      - http: # TODO - What's the difference between http and httpApi event types?
          path: game/start-public
          method: post
          cors: true

  postStartPrivateGame:
    handler: src/endpoints/postStartPrivateGame.lambdaHandler
    events:
      - http: # TODO - What's the difference between http and httpApi event types?
          path: game/start-private
          method: post
          cors: true

  postJoinPrivateGame:
    handler: src/endpoints/postJoinPrivateGame.lambdaHandler
    events:
      - http: # TODO - What's the difference between http and httpApi event types?
          path: game/{gameId}/join
          method: post
          cors: true
          request:
            parameters:
              paths:
                gameId: true

  getGameState:
    handler: src/endpoints/getGameState.lambdaHandler
    events:
      - http: # TODO - What's the difference between http and httpApi event types?
          path: game/{gameId}/state
          method: get
          cors: true
          request:
            parameters:
              paths:
                gameId: true

  postMove:
    handler: src/endpoints/postMove.lambdaHandler
    events:
      - http: # TODO - What's the difference between http and httpApi event types?
          path: game/{gameId}/move
          method: post
          cors: true
          request:
            parameters:
              paths:
                gameId: true

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:

    games:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: base-chess-games
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    publicQueue:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: base-chess-public-queue
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    privateQueue:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: base-chess-private-queue
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST


plugins:
  - serverless-domain-manager # https://www.serverless.com/blog/serverless-api-gateway-domain
  - serverless-offline # https://www.serverless.com/plugins/serverless-offline
  - serverless-dotenv-plugin # https://www.serverless.com/plugins/serverless-dotenv-plugin

custom:
  customDomain:
    domainName: 'base-chess-api.theftofaduck.com'
    certificateName : '*.theftofaduck.com'
    createRoute53Record: true
    endpointType: 'regional'
    autoDomain: true
  serverless-offline:
    httpPort: 3001 # TODO - Set up CORS